" :colorscheme lucius
" LuciusBlackLowContrast

set nocompatible              " be iMproved
filetype off                  " required!
 
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
 
" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'
Bundle 'cespare/vim-golang'
Bundle 'Blackrush/vim-gocode'
Bundle 'majutsushi/tagbar'
Bundle 'The-NERD-tree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'scrooloose/syntastic'
Bundle 'ervandew/supertab'
Bundle 'rkulla/pydiction'
Bundle 'nvie/vim-flake8'
Bundle 'drmingdrmer/xptemplate'
Bundle 'Valloric/YouCompleteMe'
Bundle 'davidhalter/jedi'
Bundle 'tell-k/vim-autopep8'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'Lokaltog/vim-powerline'
Bundle 'hdima/python-syntax'

" ... other plugin
syntax on
filetype plugin indent on     " required!

"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install (update) bundles
" :BundleSearch(!) foo - search (or refresh cache first) for foo
" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed.
 
set omnifunc=syntaxcomplete#Complete    
set completeopt=longest,menu
autocmd BufWritePre *.go :Fmt
 
set showcmd
set ruler
" enable backspace
set backspace=indent,eol,start
set nu
set tabstop=4 
set softtabstop=4 
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set pastetoggle=<F9>
set cursorcolumn

"hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=green guibg=darkred guifg=white
hi Folded guibg=black guifg=grey40 ctermfg=grey ctermbg=darkgrey
hi FoldColumn guibg=black guifg=grey20 ctermfg=4 ctermbg=7 
autocmd FileType python setlocal foldmethod=indent
"set foldlevel=2 

" Tagbar Config
nmap <F8> :TagbarToggle<CR>
autocmd VimEnter * nested :call tagbar#autoopen()
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

"vim-nerdtree-tabs Config
nmap <F2> :NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_open_on_console_startup=1

"NERDTreeToggle Config
autocmd VimEnter * NERDTree
wincmd w
autocmd VimEnter * wincmd w
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif

"pydiction Config
let g:pydiction_location ='/root/.vim/bundle/pydiction/complete-dict' 
let g:pydiction_menu_height = 20

"vim-flake8
autocmd FileType python map <buffer> <F3> :call Flake8()<CR>
autocmd BufWritePost *.py call Flake8()
let g:pyflakes_use_quickfix = 0

"XPTtemplate
let g:xptemplate_vars="SParg=" 

syntax enable
set background=dark
colorscheme solarized

set completeopt=longest,menu    "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"    "回车即选中当前项
"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" :"\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

"youcompleteme  默认tab  s-tab 和自动补全冲突
let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
"
let g:ycm_collect_identifiers_from_tags_files=1    " 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2    "
"从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0 " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1   " 语法关键字补全
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>   "force recomile with
"syntastic
nnoremap <leader>lo :lopen<CR>    "open locationlist
nnoremap <leader>lc :lclose<CR>    "close locationlist
inoremap <leader><leader> <C-x><C-o>
""在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
""注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> " 跳转到定义处

" auto-pep8 config 
autocmd FileType python map <buffer> <F4> :call Autopep8()<CR>

" syntastic 
let g:syntastic_error_symbol = '✗'  "set error or warning signs
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_check_on_open=1
let g:syntastic_enable_highlighting = 0
"let g:syntastic_python_checker="flake8,pyflakes,pep8,pylint"
let g:syntastic_python_checkers=['pyflakes']
"highlight SyntasticErrorSign guifg=white guibg=black

let g:syntastic_cpp_include_dirs = ['/usr/include/']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
let g:syntastic_enable_balloons = 11"whether to show balloons

" vim-indent-guides config
let g:indent_guides_enable_on_vim_startup = 0  " 默认关闭
let g:indent_guides_guide_size            = 1  " 指定对齐线的尺寸
let g:indent_guides_start_level       = 2  " 从第二层开始可视化显示缩进

" powerline config
let g:Powerline_symbols = 'unicode'

" 自动文件头
function! TitleInsert()
    call setline(1,"# -*- coding:utf-8 -*-")
    call append(1,'""""')
    call append(2,"Program:")
    call append(3,"Description:")
    call append(4,"Author: zhenglei - zhenglei@shinezone.com")
    call append(5,"Date: " . strftime("%Y-%m-%d %H:%M:%S"))
    call append(6,"Last modified: " . strftime("%Y-%m-%d %H:%M:%S"))
    call append(7,"Python release: 2.7")
    call append(8,'"""')
endfunction

function! DateInsert()
    call cursor(7,1)
    if search('Last modified') != 0
        let line = line('.')
        call setline(line,"Last modified: " . strftime("%Y-%m-%d %H:%M:%S"))
    endif
endfunction

:map <F5> :call TitleInsert()<CR>ggjjA
:autocmd FileWritePre,BufWritePre *.py ks|call DateInsert()|'s

" python 全高亮
let python_highlight_all = 1

" 自动运行当前py文件
au BufRead *.py map <buffer> <F6> :w<CR>:!/usr/bin/env python % <CR>


" 映射
" F2:左侧目录树
" F3:flake8检测
" F4:Autopep8
" F5:文件头插入
" F6:自动运行python文件
" F8:右侧变量
